terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>3.0.0"
    }
  }
}

provider "azurerm" {
  features {}
}

#resource group
resource "azurerm_resource_group" "rg" {
  name     = "rg-hs-aztf"  
  location = "East US" 
}

#vnet
resource "azurerm_virtual_network" "vnet" {
  name                = "vnet-hs-aztf"  
  address_space       = ["10.0.0.0/28"]  
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
}

#subnet-1
resource "azurerm_subnet" "subnet_1" {
  name                 = "subn-hs-aztf"  
  resource_group_name  = azurerm_resource_group.rg.name
  virtual_network_name = azurerm_virtual_network.vnet.name
  address_prefixes     = ["10.0.0.0/29"]
}

#public ip for resources
resource "azurerm_public_ip" "public_ip" {
  count = 2
  name                = "aztf-hs-p-ip-${count.index}"  
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
  allocation_method   = "Static"
}

# load balancer public ip
resource "azurerm_public_ip" "lb_public_ip" {
  name                = "aztf-hs-loadbalancer-public-ip"  
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
  allocation_method   = "Static"
  sku                 = "Standard"
}

#loadbalancer
resource "azurerm_lb" "load_balancer" {
  name                = "aztf-hs-load-balancer"  
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
  sku                 = "Standard"

  frontend_ip_configuration {
    name                 = "frontend-ip"
    public_ip_address_id = azurerm_public_ip.lb_public_ip.id
  }
}

#backendpool
resource "azurerm_lb_backend_address_pool" "backend_pool" {
  loadbalancer_id      = azurerm_lb.load_balancer.id
  name                 = "backend-pool"
}

#nic for vms
resource "azurerm_network_interface" "nic" {
  count                 = 2  
  name                  = "aztf-hs-nic-${count.index}"  
  location              = azurerm_resource_group.rg.location
  resource_group_name   = azurerm_resource_group.rg.name

  ip_configuration {
    name                          = "aztf-hs-ip-config-${count.index}"
    subnet_id                     = azurerm_subnet.subnet_1.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.public_ip[count.index].id
  }
}

resource "azurerm_network_security_group" "nsg" {
  name                = "aztf-hs-nsg"  
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
}

#nsg ssh rule
resource "azurerm_network_security_rule" "ssh_inbound" {
  name                        = "allow-ssh-inbound"  
  priority                    = 100
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "22"
  source_address_prefix       = "*"
  destination_address_prefix  = "*"
  resource_group_name         = azurerm_resource_group.rg.name
  network_security_group_name = azurerm_network_security_group.nsg.name
}

#nsg nginx rule
resource "azurerm_network_security_rule" "nsg_rule" {
  name                        = "allow-http"
  priority                    = 200
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "80"
  source_address_prefix       = "*"
  destination_address_prefix  = "*"
  resource_group_name         = azurerm_resource_group.rg.name
  network_security_group_name = azurerm_network_security_group.nsg.name
}

resource "azurerm_network_interface_security_group_association" "nic_nsg_association" {
  count = 2
  network_interface_id      = element(azurerm_network_interface.nic.*.id, count.index)
  network_security_group_id = azurerm_network_security_group.nsg.id
}

#vm configs
resource "azurerm_linux_virtual_machine" "vm" {
  count                 = 2  
  name                  = "aztf-hs-vm-${count.index}"  
  location              = azurerm_resource_group.rg.location
  resource_group_name   = azurerm_resource_group.rg.name
  network_interface_ids = [azurerm_network_interface.nic[count.index].id]
  size               = "Standard_DS1_v2"  
  admin_username = "myadmin"

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }

  admin_ssh_key {
    username   = "myadmin"
    public_key = file("/home/knoldus/.ssh/id_rsa.pub")
  }
  
  os_disk {
    name              = "my-os-disk-${count.index}"
    caching           = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update",
      "sudo apt-get install -y nginx",
    ]

    connection {
      type        = "ssh"
      host        = azurerm_public_ip.public_ip[count.index].ip_address
      user        = "myadmin"  
      password    = "admin@123123123"  
      agent       = false
      private_key = file("/home/knoldus/.ssh/id_rsa") 
    }
  }
}

#load balancer rules
resource "azurerm_lb_rule" "lb_rule" {
  loadbalancer_id                = azurerm_lb.load_balancer.id
  name                           = "lb-rule"
  protocol                       = "Tcp"
  frontend_port                  = 80
  backend_port                   = 80
  frontend_ip_configuration_name = "frontend-ip"  
  backend_address_pool_ids = [azurerm_lb_backend_address_pool.backend_pool.id]
}

# backend pool association
resource "azurerm_network_interface_backend_address_pool_association" "backend_pool_association" {
  count                = 2
  network_interface_id = azurerm_network_interface.nic[count.index].id
  backend_address_pool_id = azurerm_lb_backend_address_pool.backend_pool.id
  ip_configuration_name = "aztf-hs-ip-config-${count.index}"
}